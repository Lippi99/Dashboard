import type { NextPage } from "next";
import Head from "next/head";
import { useContext } from "react";
import { useForm } from "react-hook-form";
import { Box } from "../src/components/Box";
import { RegisterButton } from "../src/components/Button/Register";
import { SignInButton } from "../src/components/Button/Signin";
import { ControlledInput } from "../src/components/ControlledInput";
import { Flex } from "../src/components/Flex";
import { HighLightText } from "../src/components/HiglightText";
import { AuthContext } from "../src/context/AuthContext";
import * as yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";

interface Login {
  email: string;
  password: string;
}

const schema = yup.object({
  email: yup.string().email("E-mail invÃ¡lido").required("Informe o seu e-mail"),
  password: yup.string().required("Informe sua senha"),
});

const Home: NextPage = () => {
  const {
    control,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm<Login>({
    resolver: yupResolver(schema),
  });

  const { signIn, isLoading } = useContext(AuthContext);

  const handleLogin = async (data: Login) => {
    await signIn(data);
  };

  return (
    <>
      <Head>
        <title>Login</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex
        width="100%"
        minHeight="100vh"
        background="var(--darkBlack)"
        justify="center"
        align="center"
      >
        <form
          style={{
            maxWidth: "500px",
            width: "100%",
            backgroundColor: "var(--lightBlack)",
            margin: "0 auto",
            padding: "4rem 4rem",
            borderRadius: "7px",
          }}
          onSubmit={handleSubmit(handleLogin)}
        >
          <Flex width="100%" align="center" direction="column" padding="1rem 0">
            <Box width="100%" margin="0 0 2rem 0">
              <ControlledInput
                width="100%"
                type="email"
                placeholder="E-mail"
                name="email"
                control={control}
                error={errors.email}
              />
            </Box>
            <Box width="100%">
              <ControlledInput
                width="100%"
                type="password"
                placeholder="Senha"
                name="password"
                control={control}
                error={errors.password}
              />
            </Box>
          </Flex>
          <HighLightText text="Esqueci minha senha" />
          <SignInButton isLoading={isLoading} />
          <RegisterButton />
        </form>
      </Flex>
    </>
  );
};

export default Home;
